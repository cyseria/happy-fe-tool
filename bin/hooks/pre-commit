#! /usr/bin/env node

/**
 * @file git pre-commit hook Git代码提交之前对文件进行检查并修复
 * @author Cyseria <xcyseria@gmail.com>
 * @created time: 2018-06-28 10:58:34
 * @last modified by: Cyseria
 * @last modified time: 2018-06-30 17:21:50
 */

const { execSync, exec, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

const IGNORE_FILENAME = '.fecsignore';

let fecs; // fecs 的文件路径
let minimatch; // minimatch 的文件路径
let moduleRoot = '';

console.log('\n====== 👀 开始代码规范检查 ======');

if (hasDependencyVar('fecs')) { // 局部安装
    moduleRoot = path.resolve(__dirname, '../..');
    console.log(moduleRoot)
    fecs = require(moduleRoot + '/node_modules/fecs');
    minimatch = require(moduleRoot + '/node_modules/minimatch');
    const files = getCheckFiles();
    fecsCheck(files);
} else if (hasGlobalVar('fecs')) { // 全局 fecs
    let root = ''

    // npm 安装路径
    try {
        const moduleRoot = execSync('npm root -g', { encoding: 'utf-8' }); // 默认: /usr/local/lib/node_modules
        const fecsRoot = moduleRoot.trim() + '/fecs';
        const isExistsFecs = fs.existsSync(fecsRoot);
        if (!isExistsFecs) {
            throw new Error('npm 找不到 fecs');
        }
        fecs = require(fecsRoot);
        minimatch = require(fecsRoot + '/node_modules/minimatch');
    } catch (err) {
        // yarn 安装的路径
        try {
            const moduleRoot = execSync('yarn global dir', { encoding: 'utf-8' })
            const fecsRoot = moduleRoot.trim() + '/node_modules/fecs';
            const isExistsFecs = fs.existsSync(fecsRoot);
            if (!isExistsFecs) {
                throw new Error('yarn 找不到 fecs');
            }
            fecs = require(fecsRoot);
            minimatch = require(moduleRoot.trim() + '/node_modules/minimatch');
        } catch (err) {
            console.log('没有找到 fecs \n请运行 `npm i fecs -g` 全局安装或 `npm i fecs -D` 局部安装" ');
            process.exit(1);
        }
    }

    const files = getCheckFiles();
    fecsCheck(files);

} else { // 检查是否有局部安装
    console.log('你还没有安装 fecs \n请运行 `npm i fecs -g` 全局安装或 `npm i fecs -D` 局部安装" ');
    process.exit(1);
}

function hasGlobalVar(v) {
    try {
        // 有全局 fecs 这个命令, 寻找路径
        const globalDir = execSync(`which ${v}`, {
            encoding: 'utf-8'
        });
        return true;
    } catch (err) {
        return false;
    }
}

function hasDependencyVar(v) {
    const moduleRoot = path.resolve(__dirname, '../..');
    const fecsRoot = path.resolve(moduleRoot, 'node_modules/fecs');
    return fs.existsSync(fecsRoot);
}

/**
 * 获取需要检查的文件
 */
function getCheckFiles() {
    let stagedFiles = '';
    try {
        // git diff-index --cached HEAD --name-only
        // diff-index 查看连个版本的索引 --cached 暂存区（add） --name-only 只显示文件名
        // HEAD 最近的 commit
        const result = execSync('git diff-index --cached --name-only HEAD', { encoding: 'utf-8' });
        if (!result) {
            console.log('****** 暂存区没有文件，请添加后再提交 ******');
            process.exit(1);
        }

        // 还有文件未添加
        if (result.indexOf('Changes not staged for commit:') >= 0) {
            console.log(result);
            process.exit(1);
        }
        stagedFiles = stagedFiles || result.trim().split('\n');
        // 忽略删除的（不存在）文件，commit 删除的
        stagedFiles = stagedFiles.filter(function (file) {
            var filePath = path.resolve(__dirname, '../../', file);
            return fs.existsSync(filePath);
        })
        // 忽略 fecs 中忽略的文件
        stagedFiles = ignore(stagedFiles);
        return stagedFiles;

        // process.exit(1);
    } catch (err) {
        // 第一次提交没有提交记录，就没有 HEAD 记录，会报错
        // fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.
        if (('' + err).indexOf('unknown revision') > 0) {
            console.log('仓库还没有提交记录，默认对所有文件进行检查');
            stagedFiles = ['./**/*.{js,css,less,scss,html,vue}'];
            return stagedFiles;
        } else {
            console.log(err)
        }
    }
}

/**
 * 删除 fecs 中忽略的文件
 * @param  {Array} files 文件列表
 * @return {Array} 修改后的文件列表
 */
function ignore(files) {
    const ignoreFilePath = path.resolve(__dirname, '../../' + IGNORE_FILENAME);
    function valid(line) {
        line = line.trim();
        return line !== '' && line[0] !== '#';
    }
    try {
        const patterns = fs.readFileSync(ignoreFilePath, 'utf8').split(/\r?\n/).filter(valid);
        const filesArr = files.filter(filePath => {
            let result = false;
            patterns.forEach(pattern => {
                // 对于过滤 *.foo 这样的后缀文件, 采用 minimatch
                const matches = minimatch(filePath, pattern) || minimatch(filePath, pattern + '/**');
                if (matches) {
                    result = true;
                    console.log('%s is ignored by %s.', filePath, '.fecsignore');
                }
            });
            return !result;
        });
        return filesArr;
    }
    catch (err) { // 没有.fecsignore
        return files;
    }
}

/**
 * 运行代码检查
 * @param  {Array} files 文件列表数组
 */
function fecsCheck(files) {
    var options = {
        color: true,
        rule: true,
        stream: false,
        lookup: true,
        level: 2,
        _: files
    };

    fecs.check(options, (success, json) => {
        success = success && json.length === 0;
        if (!success) {
            console.log('看来规范还有问题，请修改以后再提交吧！');
        }
        console.log('');
        process.exit(success ? 0 : 1);
    });
}